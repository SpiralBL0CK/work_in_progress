
void wpa_sm_set_pmk	(	struct wpa_sm * 	sm,
const u8 * 	pmk,
size_t 	pmk_len,
const u8 * 	bssid 
)	
    ->
        struct wpa_sm{
            u8 	pmk [PMK_LEN]
            size_t 	pmk_len
            struct wpa_ptk ptk 	tptk
            int 	ptk_set
            int 	tptk_set
            unsigned int 	msg_3_of_4_ok:1
            u8 	snonce [WPA_NONCE_LEN]
            u8 	anonce [WPA_NONCE_LEN]
            int 	renew_snonce
            u8 	rx_replay_counter [WPA_REPLAY_COUNTER_LEN]
            int 	rx_replay_counter_set
            u8 	request_counter [WPA_REPLAY_COUNTER_LEN]
            struct eapol_sm * 	eapol
            struct rsn_pmksa_cache * 	pmksa
            struct rsn_pmksa_cache_entry * 	cur_pmksa
            struct dl_list 	pmksa_candidates
            struct l2_packet_data * 	l2_preauth
            struct l2_packet_data * 	l2_preauth_br
            struct l2_packet_data * 	l2_tdls
            u8 	preauth_bssid [ETH_ALEN]
            struct eapol_sm * 	preauth_eapol
            struct wpa_sm_ctx * 	ctx
            void * 	scard_ctx
            int 	fast_reauth
            void * 	network_ctx
            int 	peerkey_enabled
            int 	allowed_pairwise_cipher
            int 	proactive_key_caching
            int 	eap_workaround
            void * 	eap_conf_ctx
            u8 	ssid [32]
            size_t 	ssid_len
            int 	wpa_ptk_rekey
            int 	p2p
            u8 	own_addr [ETH_ALEN]
            const char * 	ifname
            const char * 	bridge_ifname
            u8 	bssid [ETH_ALEN]
            unsigned int 	dot11RSNAConfigPMKLifetime
            unsigned int 	dot11RSNAConfigPMKReauthThreshold
            unsigned int 	dot11RSNAConfigSATimeout
            unsigned int 	dot11RSNA4WayHandshakeFailures
            unsigned int 	proto
            unsigned int 	pairwise_cipher
            unsigned int 	group_cipher
            unsigned int 	key_mgmt
            unsigned int 	mgmt_group_cipher
            int 	rsn_enabled
            int 	mfp
            u8 * 	assoc_wpa_ie
            size_t 	assoc_wpa_ie_len
            u8 * 	ap_wpa_ie
            u8 * 	ap_rsn_ie
            size_t 	ap_wpa_ie_len
            size_t 	ap_rsn_ie_len
            u8 	p2p_ip_addr [3 *4]
}wpa_sm;

typedef eapol_sm {
        enum  	{
            SUPP_PAE_UNKNOWN = 0, SUPP_PAE_DISCONNECTED = 1, SUPP_PAE_LOGOFF = 2, SUPP_PAE_CONNECTING = 3,
            SUPP_PAE_AUTHENTICATING = 4, SUPP_PAE_AUTHENTICATED = 5, SUPP_PAE_HELD = 7, SUPP_PAE_RESTART = 8,
            SUPP_PAE_S_FORCE_AUTH = 9, SUPP_PAE_S_FORCE_UNAUTH = 10
        }
        enum{ 
            KEY_RX_UNKNOWN = 0, KEY_RX_NO_KEY_RECEIVE, KEY_RX_KEY_RECEIVE 
        }
        enum {
                SUPP_BE_UNKNOWN = 0, SUPP_BE_INITIALIZE = 1, SUPP_BE_IDLE = 2, SUPP_BE_REQUEST = 3,
                SUPP_BE_RECEIVE = 4, SUPP_BE_RESPONSE = 5, SUPP_BE_FAIL = 6, SUPP_BE_TIMEOUT = 7,
                SUPP_BE_SUCCESS = 8
        }
        enum {
            EAPOL_CB_IN_PROGRESS = 0, EAPOL_CB_SUCCESS, EAPOL_CB_FAILURE 
        }
}

struct rsn_pmksa_cache_entry {
    struct rsn_pmksa_cache_entry * 	next
 
struct rsn_pmksa_cache_entry * 	hnext
    u8 	pmkid [PMKID_LEN]
    u8 	pmk [PMK_LEN]
    size_t 	pmk_len
    os_time_t 	expiration
    int 	akmp
    u8 	spa [ETH_ALEN]
    u8 * 	identity
    size_t 	identity_len
    struct wpabuf * 	cui
    struct radius_class_data 	radius_class
    u8 	eap_type_authsrv
    int 	vlan_id
    int 	opportunistic
    u32 	acct_multi_session_id_hi
    u32 	acct_multi_session_id_lo
    u8 	aa [ETH_ALEN]
    os_time_t 	reauth_time
    void * 	network_ctx
}

struct rsn_pmksa_cache{
    struct rsn_pmksa_cache_entry * 	pmkid [PMKID_HASH_SIZE]
    struct rsn_pmksa_cache_entry * 	pmksa
    int 	pmksa_count
    void(* 	free_cb )(struct rsn_pmksa_cache_entry *entry, void *ctx)
    void * 	ctx
    struct wpa_sm * 	sm
}

struct dl_list {
    struct dl_list * 	next
    struct dl_list * 	prev
}dl_list 

struct l2_packet_data {
    pcap_t * 	pcap
    char 	ifname [100]
    u8 	own_addr [ETH_ALEN]
    void(* 	rx_callback )(void *ctx, const u8 *src_addr, const u8 *buf, size_t len)
    void * 	rx_callback_ctx
    int 	l2_hdr
    int 	fd
    int 	ifindex
    int 	fd_br_rx
    int 	last_from_br
    u8 	last_hash [SHA1_MAC_LEN]
    unsigned int 	num_rx
    unsigned int 	num_rx_br
    HANDLE 	rx_avail
    OVERLAPPED 	rx_overlapped
    u8 	rx_buf [1514]
    DWORD 	rx_written
    eth_t * 	eth
    char * 	own_socket_path
    struct sockaddr_un 	priv_addr
    unsigned int 	num_fast_poll
    int 	running
    HANDLE 	rx_done
    HANDLE 	rx_thread
    HANDLE 	rx_thread_done
    HANDLE 	rx_notify
    u8 * 	rx_buf
    u8 * 	rx_src
    size_t 	rx_len
    size_t 	rx_no_wait
}l2_packet_data ;


strct wpa_ptk{
    u8 	kck [WPA_KCK_MAX_LEN]
    u8 	kek [WPA_KEK_MAX_LEN]
    u8 	tk [WPA_TK_MAX_LEN]
    size_t 	kck_len
    size_t 	kek_len
    size_t 	tk_len
}wpa_ptk;


struct wpa_sm_ctx {
    void * 	ctx
    void * 	msg_ctx
    void(* 	set_state )(void *ctx, enum wpa_states state)
    enum wpa_states(* 	get_state )(void *ctx)
    void(* 	deauthenticate )(void *ctx, int reason_code)
    int(* 	set_key )(void *ctx, enum wpa_alg alg, const u8 *addr, int key_idx, int set_tx, const u8 *seq, size_t seq_len, const u8 *key, size_t key_len)
    void *(* 	get_network_ctx )(void *ctx)
    int(* 	get_bssid )(void *ctx, u8 *bssid)
    int(* 	ether_send )(void *ctx, const u8 *dest, u16 proto, const u8 *buf, size_t len)
    int(* 	get_beacon_ie )(void *ctx)
    void(* 	cancel_auth_timeout )(void *ctx)
    u8 *(* 	alloc_eapol )(void *ctx, u8 type, const void *data, u16 data_len, size_t *msg_len, void **data_pos)
    int(* 	add_pmkid )(void *ctx, const u8 *bssid, const u8 *pmkid)
    int(* 	remove_pmkid )(void *ctx, const u8 *bssid, const u8 *pmkid)
    void(* 	set_config_blob )(void *ctx, struct wpa_config_blob *blob)
    const struct wpa_config_blob *(* 	get_config_blob )(void *ctx, const char *name)
    int(* 	mlme_setprotection )(void *ctx, const u8 *addr, int protection_type, int key_type)
    int(* 	update_ft_ies )(void *ctx, const u8 *md, const u8 *ies, size_t ies_len)
    int(* 	send_ft_action )(void *ctx, u8 action, const u8 *target_ap, const u8 *ies, size_t ies_len)
    int(* 	mark_authenticated )(void *ctx, const u8 *target_ap)
    void(* 	set_rekey_offload )(void *ctx, const u8 *kek, size_t kek_len, const u8 *kck, size_t kck_len, const u8 *replay_ctr)
    int(* 	key_mgmt_set_pmk )(void *ctx, const u8 *pmk, size_t pmk_len)
}wpa_sm_ctx;

typedef enum wpa_states{
    WPA_DISCONNECTED ,
    WPA_INTERFACE_DISABLED ,
    WPA_INACTIVE ,
    WPA_SCANNING ,
    WPA_AUTHENTICATING ,
    WPA_ASSOCIATING ,
    WPA_ASSOCIATED ,
    WPA_4WAY_HANDSHAKE ,
    WPA_GROUP_HANDSHAKE ,
    WPA_COMPLETED 	
};

struct wpa_config_blob {
    char * 	name
    u8 * 	data
    size_t 	len
    struct wpa_config_blob * 	next
}wpa_config_blob ;
